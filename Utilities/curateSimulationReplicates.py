#!/usr/bin/python
import optparse
import datetime
import os
import re
import sys

"""
@author: Jacob Porter
This program creates
"""

def curateInformation(acc_files_dir, file_list, separator, program_name):
    file_list.sort()
    prog = re.compile("[0-9]+")
    counter = 0
    sys.stdout.write("Replicate_Number" + separator + "Precision" + "_" + program_name + separator + "Recall"  + "_" + program_name + separator + "F1_Score" + "_" + program_name + "\n")
    #sys.stderr.write(str(file_list))
    for f in file_list:
        counter += 1
        ans = prog.findall(f)
        if len(ans) >= 1:
            replicate_number = int(ans[0])
        else:
            replicate_number = counter
        precision, recall = getRow(os.path.join(acc_files_dir, f))
        prec = float(precision)
        rec = float(recall)
        f1 = 2 * prec * rec / (prec + rec + 0.0)
        sys.stdout.write("%d%s%f%s%f\t%f\n" % (replicate_number, separator, precision, separator, recall, f1))
    return counter


def getRow(file_path):
    recall = None
    precision = None
    fd = open(file_path, 'r')
    for line in fd:
        #sys.stderr.write(line)
        if line.startswith("Percent correct of total"):
            recall = line.split(":")[1].strip()
            #sys.stderr.write("Got to recall\n")
        if line.startswith("Percent correct of analyzed"):
            precision = line.split(":")[1].strip()
            #sys.stderr.write("Got to precision\n")
    try:
        return_value = (float(precision), float(recall))
    except TypeError as e:
        sys.stderr.write("There was an error converting the precision %s and recall %s\n" % (str(precision), str(recall)))
        raise e
    return return_value


def postInfo(number_of_records, acc_files_dir, separator, ending, now, later):
    sys.stderr.write("The curation process was started on %s.\n%d records were processed for directory %s for files ending with %s.  The results were printed with separator %s.  This took %s time.\n" % 
               (str(now), number_of_records, acc_files_dir, ending, separator, str(later - now)))


def main():
    now = datetime.datetime.now()
    usage = "usage: %prog [options] <directory of .acc files> "
    version = "%prog "
    description = "This program examines all files ending with the extension .acc generated by calculateSimulationAccuracy and curates the information in a tsv format."
    epilog = ""
    p = optparse.OptionParser(usage = usage, version = version, 
                              description = description, epilog = epilog)
    p.add_option('--separator','-s',help='The character that seperates the columns in the output. [default: %default]', default = "\t")
    p.add_option('--ending','-e',help='The ending of the accuracy files. [default: %default]', default = ".acc")
    p.add_option('--program','-p',help='The name of the program that generated the results. [default: %default]', default = "")
    options, args = p.parse_args()
    if len(args) != 1:
        p.error("There must be at least one argument, the directory where the .acc files are located.")
    acc_files_dir = args[0]
    separator = options.separator
    ending = options.ending
    if not os.path.isdir(acc_files_dir):
        p.error("The directory is invalid.  Please ensure that an existing directory is given.")
    onlyfiles = [f for f in os.listdir(acc_files_dir) if os.path.isfile(os.path.join(acc_files_dir, f))]
    onlyfiles = [f for f in onlyfiles if f.endswith(ending)]
    number_of_records = curateInformation(acc_files_dir, onlyfiles, separator, options.program)
    later = datetime.datetime.now()
    postInfo(number_of_records, acc_files_dir, separator, ending, now, later)


if __name__ == "__main__":
    main()